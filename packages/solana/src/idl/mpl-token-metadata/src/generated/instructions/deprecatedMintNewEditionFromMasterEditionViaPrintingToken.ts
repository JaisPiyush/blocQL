/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
    Context,
    Pda,
    PublicKey,
    Signer,
    TransactionBuilder,
    publicKey,
    transactionBuilder,
} from '@metaplex-foundation/umi';
import {
    Serializer,
    mapSerializer,
    struct,
    u8,
} from '@metaplex-foundation/umi/serializers';
import { findMasterEditionPda, findMetadataPda } from '../accounts';
import {
    ResolvedAccount,
    ResolvedAccountsWithIndices,
    expectPublicKey,
    getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionAccounts =
    {
        /** New Metadata key (pda of ['metadata', program id, mint id]) */
        metadata?: PublicKey | Pda;
        /** New Edition V1 (pda of ['metadata', program id, mint id, 'edition']) */
        edition?: PublicKey | Pda;
        /** Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition']) */
        masterEdition?: PublicKey | Pda;
        /** Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY */
        mint: PublicKey | Pda;
        /** Mint authority of new mint */
        mintAuthority: Signer;
        /** Printing Mint of master record edition */
        printingMint: PublicKey | Pda;
        /** Token account containing Printing mint token to be transferred */
        masterTokenAccount: PublicKey | Pda;
        /** Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master mint id, edition_number]) */
        editionMarker?: PublicKey | Pda;
        /** Burn authority for this token */
        burnAuthority: Signer;
        /** payer */
        payer?: Signer;
        /** update authority info for new metadata account */
        masterUpdateAuthority: PublicKey | Pda;
        /** Master record metadata account */
        masterMetadata: PublicKey | Pda;
        /** Token program */
        tokenProgram?: PublicKey | Pda;
        /** System program */
        systemProgram?: PublicKey | Pda;
        /** Rent info */
        rent?: PublicKey | Pda;
        /** Reservation List - If present, and you are on this list, you can get an edition number given by your position on the list. */
        reservationList?: PublicKey | Pda;
    };

// Data.
export type DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData =
    { discriminator: number };

export type DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs =
    {};

export function getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer(): Serializer<
    DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs,
    DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData
> {
    return mapSerializer<
        DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs,
        any,
        DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData
    >(
        struct<DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData>(
            [['discriminator', u8()]],
            {
                description:
                    'DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData',
            }
        ),
        (value) => ({ ...value, discriminator: 3 })
    ) as Serializer<
        DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs,
        DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData
    >;
}

// Instruction.
export function deprecatedMintNewEditionFromMasterEditionViaPrintingToken(
    context: Pick<Context, 'eddsa' | 'payer' | 'programs'>,
    input: DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionAccounts
): TransactionBuilder {
    // Program ID.
    const programId = context.programs.getPublicKey(
        'mplTokenMetadata',
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );

    // Accounts.
    const resolvedAccounts: ResolvedAccountsWithIndices = {
        metadata: { index: 0, isWritable: true, value: input.metadata ?? null },
        edition: { index: 1, isWritable: true, value: input.edition ?? null },
        masterEdition: {
            index: 2,
            isWritable: true,
            value: input.masterEdition ?? null,
        },
        mint: { index: 3, isWritable: true, value: input.mint ?? null },
        mintAuthority: {
            index: 4,
            isWritable: false,
            value: input.mintAuthority ?? null,
        },
        printingMint: {
            index: 5,
            isWritable: true,
            value: input.printingMint ?? null,
        },
        masterTokenAccount: {
            index: 6,
            isWritable: true,
            value: input.masterTokenAccount ?? null,
        },
        editionMarker: {
            index: 7,
            isWritable: true,
            value: input.editionMarker ?? null,
        },
        burnAuthority: {
            index: 8,
            isWritable: false,
            value: input.burnAuthority ?? null,
        },
        payer: { index: 9, isWritable: false, value: input.payer ?? null },
        masterUpdateAuthority: {
            index: 10,
            isWritable: false,
            value: input.masterUpdateAuthority ?? null,
        },
        masterMetadata: {
            index: 11,
            isWritable: false,
            value: input.masterMetadata ?? null,
        },
        tokenProgram: {
            index: 12,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        systemProgram: {
            index: 13,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        rent: { index: 14, isWritable: false, value: input.rent ?? null },
        reservationList: {
            index: 15,
            isWritable: true,
            value: input.reservationList ?? null,
        },
    };

    // Default values.
    if (!resolvedAccounts.metadata.value) {
        resolvedAccounts.metadata.value = findMetadataPda(context, {
            mint: expectPublicKey(resolvedAccounts.mint.value),
        });
    }
    if (!resolvedAccounts.edition.value) {
        resolvedAccounts.edition.value = findMasterEditionPda(context, {
            mint: expectPublicKey(resolvedAccounts.mint.value),
        });
    }
    if (!resolvedAccounts.masterEdition.value) {
        resolvedAccounts.masterEdition.value = findMasterEditionPda(context, {
            mint: expectPublicKey(resolvedAccounts.mint.value),
        });
    }
    if (!resolvedAccounts.editionMarker.value) {
        resolvedAccounts.editionMarker.value = findMasterEditionPda(context, {
            mint: expectPublicKey(resolvedAccounts.mint.value),
        });
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
        );
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
        );
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.rent.value) {
        resolvedAccounts.rent.value = publicKey(
            'SysvarRent111111111111111111111111111111111'
        );
    }

    // Accounts in order.
    const orderedAccounts: ResolvedAccount[] = Object.values(
        resolvedAccounts
    ).sort((a, b) => a.index - b.index);

    // Keys and Signers.
    const [keys, signers] = getAccountMetasAndSigners(
        orderedAccounts,
        'omitted',
        programId
    );

    // Data.
    const data =
        getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer().serialize(
            {}
        );

    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;

    return transactionBuilder([
        {
            instruction: { keys, programId, data },
            signers,
            bytesCreatedOnChain,
        },
    ]);
}
