/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
    Account,
    Context,
    Pda,
    PublicKey,
    RpcAccount,
    RpcGetAccountOptions,
    RpcGetAccountsOptions,
    assertAccountExists,
    deserializeAccount,
    gpaBuilder,
    publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
    Serializer,
    publicKey as publicKeySerializer,
    string,
    struct,
    u8,
} from '@metaplex-foundation/umi/serializers';
import {
    MetadataDelegateRoleSeedArgs,
    getMetadataDelegateRoleSeedSerializer,
} from '../../hooked';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type MetadataDelegateRecord = Account<MetadataDelegateRecordAccountData>;

export type MetadataDelegateRecordAccountData = {
    key: Key;
    bump: number;
    mint: PublicKey;
    delegate: PublicKey;
    updateAuthority: PublicKey;
};

export type MetadataDelegateRecordAccountDataArgs = {
    key: KeyArgs;
    bump: number;
    mint: PublicKey;
    delegate: PublicKey;
    updateAuthority: PublicKey;
};

export function getMetadataDelegateRecordAccountDataSerializer(): Serializer<
    MetadataDelegateRecordAccountDataArgs,
    MetadataDelegateRecordAccountData
> {
    return struct<MetadataDelegateRecordAccountData>(
        [
            ['key', getKeySerializer()],
            ['bump', u8()],
            ['mint', publicKeySerializer()],
            ['delegate', publicKeySerializer()],
            ['updateAuthority', publicKeySerializer()],
        ],
        { description: 'MetadataDelegateRecordAccountData' }
    ) as Serializer<
        MetadataDelegateRecordAccountDataArgs,
        MetadataDelegateRecordAccountData
    >;
}

export function deserializeMetadataDelegateRecord(
    rawAccount: RpcAccount
): MetadataDelegateRecord {
    return deserializeAccount(
        rawAccount,
        getMetadataDelegateRecordAccountDataSerializer()
    );
}

export async function fetchMetadataDelegateRecord(
    context: Pick<Context, 'rpc'>,
    publicKey: PublicKey | Pda,
    options?: RpcGetAccountOptions
): Promise<MetadataDelegateRecord> {
    const maybeAccount = await context.rpc.getAccount(
        toPublicKey(publicKey, false),
        options
    );
    assertAccountExists(maybeAccount, 'MetadataDelegateRecord');
    return deserializeMetadataDelegateRecord(maybeAccount);
}

export async function safeFetchMetadataDelegateRecord(
    context: Pick<Context, 'rpc'>,
    publicKey: PublicKey | Pda,
    options?: RpcGetAccountOptions
): Promise<MetadataDelegateRecord | null> {
    const maybeAccount = await context.rpc.getAccount(
        toPublicKey(publicKey, false),
        options
    );
    return maybeAccount.exists
        ? deserializeMetadataDelegateRecord(maybeAccount)
        : null;
}

export async function fetchAllMetadataDelegateRecord(
    context: Pick<Context, 'rpc'>,
    publicKeys: Array<PublicKey | Pda>,
    options?: RpcGetAccountsOptions
): Promise<MetadataDelegateRecord[]> {
    const maybeAccounts = await context.rpc.getAccounts(
        publicKeys.map((key) => toPublicKey(key, false)),
        options
    );
    return maybeAccounts.map((maybeAccount) => {
        assertAccountExists(maybeAccount, 'MetadataDelegateRecord');
        return deserializeMetadataDelegateRecord(maybeAccount);
    });
}

export async function safeFetchAllMetadataDelegateRecord(
    context: Pick<Context, 'rpc'>,
    publicKeys: Array<PublicKey | Pda>,
    options?: RpcGetAccountsOptions
): Promise<MetadataDelegateRecord[]> {
    const maybeAccounts = await context.rpc.getAccounts(
        publicKeys.map((key) => toPublicKey(key, false)),
        options
    );
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) =>
            deserializeMetadataDelegateRecord(maybeAccount as RpcAccount)
        );
}

export function getMetadataDelegateRecordGpaBuilder(
    context: Pick<Context, 'rpc' | 'programs'>
) {
    const programId = context.programs.getPublicKey(
        'mplTokenMetadata',
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    return gpaBuilder(context, programId)
        .registerFields<{
            key: KeyArgs;
            bump: number;
            mint: PublicKey;
            delegate: PublicKey;
            updateAuthority: PublicKey;
        }>({
            key: [0, getKeySerializer()],
            bump: [1, u8()],
            mint: [2, publicKeySerializer()],
            delegate: [34, publicKeySerializer()],
            updateAuthority: [66, publicKeySerializer()],
        })
        .deserializeUsing<MetadataDelegateRecord>((account) =>
            deserializeMetadataDelegateRecord(account)
        );
}

export function getMetadataDelegateRecordSize(): number {
    return 98;
}

export function findMetadataDelegateRecordPda(
    context: Pick<Context, 'eddsa' | 'programs'>,
    seeds: {
        /** The address of the mint account */
        mint: PublicKey;
        /** The role of the metadata delegate */
        delegateRole: MetadataDelegateRoleSeedArgs;
        /** The address of the metadata's update authority */
        updateAuthority: PublicKey;
        /** The address of the delegate authority */
        delegate: PublicKey;
    }
): Pda {
    const programId = context.programs.getPublicKey(
        'mplTokenMetadata',
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    return context.eddsa.findPda(programId, [
        string({ size: 'variable' }).serialize('metadata'),
        publicKeySerializer().serialize(programId),
        publicKeySerializer().serialize(seeds.mint),
        getMetadataDelegateRoleSeedSerializer().serialize(seeds.delegateRole),
        publicKeySerializer().serialize(seeds.updateAuthority),
        publicKeySerializer().serialize(seeds.delegate),
    ]);
}

export async function fetchMetadataDelegateRecordFromSeeds(
    context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
    seeds: Parameters<typeof findMetadataDelegateRecordPda>[1],
    options?: RpcGetAccountOptions
): Promise<MetadataDelegateRecord> {
    return fetchMetadataDelegateRecord(
        context,
        findMetadataDelegateRecordPda(context, seeds),
        options
    );
}

export async function safeFetchMetadataDelegateRecordFromSeeds(
    context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
    seeds: Parameters<typeof findMetadataDelegateRecordPda>[1],
    options?: RpcGetAccountOptions
): Promise<MetadataDelegateRecord | null> {
    return safeFetchMetadataDelegateRecord(
        context,
        findMetadataDelegateRecordPda(context, seeds),
        options
    );
}
